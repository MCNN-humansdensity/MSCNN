{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1_gXe2mGKvqH6Y_J9RN_teC6KkAPo_Jz3","authorship_tag":"ABX9TyOG4Op0Io7XmnzF/90SfI3+"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["## Data"],"metadata":{"id":"8iME7QGiKOai"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":332},"id":"DznaJLTqJ6DT","executionInfo":{"status":"ok","timestamp":1658452896936,"user_tz":-480,"elapsed":2854,"user":{"displayName":"Zaicy Xu","userId":"06632767477982099207"}},"outputId":"37f16bd3-7ffc-4a1e-da56-c8f3aa5dd8c0"},"outputs":[{"output_type":"stream","name":"stdout","text":["37\n","37\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 3 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["# -*- coding: utf-8 -*-\n","\"\"\"\n","@Project Name  ColabProject\n","@File Name:    MSCNN\n","@Software:     Google Colab\n","@Time:         17/Dec/2022\n","@Author:       zaicy\n","@contact:      zaicyxu@gmail.com\n","@version:      1.0\n","@Description:  None\n","\"\"\"\n","\n","import cv2\n","import os\n","import numpy as np\n","import scipy.io as sio\n","from multiprocessing.dummy import Pool as ThreadPool\n","\n","import matplotlib.pyplot as plt\n","\n","os.environ['KMP_DUPLICATE_LIB_OK'] = 'TRUE'\n","def visualization(img, dmap):\n","    plt.figure()\n","\n","    plt.subplot(121)\n","    plt.imshow(img)\n","\n","    plt.subplot(122)\n","    # plt.imshow(dmap)\n","    plt.colorbar()\n","\n","    plt.tight_layout()\n","    plt.show()\n","\n","def read_annotations():\n","    \"\"\"read annotation data.\n","\n","    Returns:\n","        count: ndarray, head count.\n","        position: ndarray, coordinate.\n","    \"\"\"\n","    data = sio.loadmat(r'/content/drive/MyDrive/MSCNN-humansdensity-master/mall_dataset/mall_gt.mat')\n","    count = data['count']\n","    position = data['frame'][0]\n","\n","    return count, position\n","\n","\n","def map_pixels(img, image_key, annotations, size):\n","    \"\"\"map annotations to density map.\n","\n","    Arguments:\n","        img: ndarray, img.\n","        image_key: int, image_key.\n","        annotations: ndarray, annotations.\n","        size: resize size.\n","\n","    Returns:\n","        pixels: ndarray, density map.\n","    \"\"\"\n","    gaussian_kernel = 15\n","    h, w = img.shape[:-1]\n","    sh, sw = size / h, size / w\n","    pixels = np.zeros((size, size))\n","\n","    for a in annotations[image_key][0][0][0]:\n","        x, y = int(a[0] * sw), int(a[1] * sh)\n","        if y >= size or x >= size:\n","            print(\"{},{} is out of range, skipping annotation for {}\".format(x, y, image_key))\n","        else:\n","            pixels[y, x] += 1\n","\n","    pixels = cv2.GaussianBlur(pixels, (gaussian_kernel, gaussian_kernel), 0)\n","\n","    return pixels\n","\n","\n","def get_data(i, size, annotations):\n","    \"\"\"get data accoding to the image_key.\n","\n","    Arguments:\n","        i: int, image_key.\n","        size: int, input shape of network.\n","        annotations: ndarray, annotations.\n","\n","    Returns:\n","        img: ndarray, img.\n","        density_map: ndarray, density map.\n","    \"\"\"\n","    name = r'/content/drive/MyDrive/MSCNN-humansdensity-master/mall_dataset/frames/seq_{}.jpg'.format(str(i + 1).zfill(6))\n","    img = cv2.imread(name)\n","\n","    density_map = map_pixels(img, i, annotations, size // 4)\n","\n","    img = cv2.resize(img, (size, size))\n","    img = img / 255.\n","\n","    density_map = np.expand_dims(density_map, axis=-1)\n","\n","    return img, density_map\n","\n","\n","def generator(indices, batch, size):\n","    \"\"\"data generator.\n","\n","    Arguments:\n","        indices: list, image_key.\n","        batch: int, batch size.\n","        size: int, input shape of network.\n","\n","    Returns:\n","        images: ndarray, batch images.\n","        labels: ndarray, batch density maps.\n","    \"\"\"\n","    count, position = read_annotations()\n","\n","    i = 0\n","    n = len(indices)\n","\n","    if batch > n:\n","        raise Exception('Batch size {} is larger than the number of dataset {}!'.format(batch, n))\n","\n","    while True:\n","        if i + batch >= n:\n","            np.random.shuffle(indices)\n","            i = 0\n","            continue\n","\n","        pool = ThreadPool(2)\n","        res = pool.map(lambda x: get_data(x, size, position), indices[i: i + batch])\n","        pool.close()\n","        pool.join()\n","\n","        i += batch\n","        images = []\n","        labels = []\n","\n","        for r in res:\n","            images.append(r[0])\n","            labels.append(r[1])\n","\n","        images = np.array(images)\n","        labels = np.array(labels)\n","\n","        yield images, labels\n","\n","\n","if __name__ == '__main__':\n","    count, position = read_annotations()\n","    img, density_map = get_data(10, 224, position)\n","\n","    print(count[10][0])\n","    print(int(np.sum(density_map)))\n","    visualization(img, density_map)"]},{"cell_type":"markdown","source":["## Model"],"metadata":{"id":"_Qjfm4lXKUNb"}},{"cell_type":"code","source":["# -*- coding: utf-8 -*-\n","\n","# from keras.layers import Input, Conv2D, MaxPooling2D, concatenate, Activation\n","from keras.layers import *\n","from keras.models import Model\n","from keras.regularizers import l2\n","from keras.utils.vis_utils import plot_model\n","import pydotplus as pydot\n","\n","\n","def MSB(filters):\n","    \"\"\"Multi-Scale Blob.\n","\n","    Arguments:\n","        filters: int, filters num.\n","\n","    Returns:\n","        f: function, layer func.\n","    \"\"\"\n","    params = {'activation': 'relu', 'padding': 'same',\n","              'kernel_regularizer': l2(5e-4)}\n","\n","    def f(x):\n","        x1 = Conv2D(filters, 9, **params)(x)\n","        x2 = Conv2D(filters, 7, **params)(x)\n","        x3 = Conv2D(filters, 5, **params)(x)\n","        x4 = Conv2D(filters, 3, **params)(x)\n","        x = concatenate([x1, x2, x3, x4])\n","        x = BatchNormalization()(x)\n","        x = Activation('relu')(x)\n","\n","        return x\n","    return f\n","\n","\n","def MSCNN(input_shape):\n","    \"\"\"Multi-scale convolutional neural network for crowd counting.\n","\n","    Arguments:\n","        input_shape: tuple, image shape with (w, h, c).\n","\n","    Returns:\n","        model: Model, keras model.\n","    \"\"\"\n","    inputs = Input(shape=input_shape)\n","\n","    x = Conv2D(64, 9, activation='relu', padding='same')(inputs)\n","    x = MSB(4 * 16)(x)\n","    x = MaxPooling2D()(x)\n","    x = MSB(4 * 32)(x)\n","    x = MSB(4 * 32)(x)\n","    x = MaxPooling2D()(x)\n","    x = MSB(3 * 64)(x)\n","    x = MSB(3 * 64)(x)\n","    x = Conv2D(1000, 1, activation='relu', kernel_regularizer=l2(5e-4))(x)\n","    x = Conv2D(1, 1, activation='relu')(x)\n","\n","    model = Model(inputs=inputs, outputs=x)\n","\n","    return model\n","\n","\n","if __name__ == '__main__':\n","    model = MSCNN((224, 224, 3))\n","\n","    print(model.summary())\n","    # plot_model(model, to_file='images\\model.png', show_shapes=True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VzRQM8c0KWzg","executionInfo":{"status":"ok","timestamp":1658452938503,"user_tz":-480,"elapsed":5559,"user":{"displayName":"Zaicy Xu","userId":"06632767477982099207"}},"outputId":"cc786b06-aeda-4b08-9d3e-743c1ebe5d26"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"model\"\n","__________________________________________________________________________________________________\n"," Layer (type)                   Output Shape         Param #     Connected to                     \n","==================================================================================================\n"," input_1 (InputLayer)           [(None, 224, 224, 3  0           []                               \n","                                )]                                                                \n","                                                                                                  \n"," conv2d (Conv2D)                (None, 224, 224, 64  15616       ['input_1[0][0]']                \n","                                )                                                                 \n","                                                                                                  \n"," conv2d_1 (Conv2D)              (None, 224, 224, 64  331840      ['conv2d[0][0]']                 \n","                                )                                                                 \n","                                                                                                  \n"," conv2d_2 (Conv2D)              (None, 224, 224, 64  200768      ['conv2d[0][0]']                 \n","                                )                                                                 \n","                                                                                                  \n"," conv2d_3 (Conv2D)              (None, 224, 224, 64  102464      ['conv2d[0][0]']                 \n","                                )                                                                 \n","                                                                                                  \n"," conv2d_4 (Conv2D)              (None, 224, 224, 64  36928       ['conv2d[0][0]']                 \n","                                )                                                                 \n","                                                                                                  \n"," concatenate (Concatenate)      (None, 224, 224, 25  0           ['conv2d_1[0][0]',               \n","                                6)                                'conv2d_2[0][0]',               \n","                                                                  'conv2d_3[0][0]',               \n","                                                                  'conv2d_4[0][0]']               \n","                                                                                                  \n"," batch_normalization (BatchNorm  (None, 224, 224, 25  1024       ['concatenate[0][0]']            \n"," alization)                     6)                                                                \n","                                                                                                  \n"," activation (Activation)        (None, 224, 224, 25  0           ['batch_normalization[0][0]']    \n","                                6)                                                                \n","                                                                                                  \n"," max_pooling2d (MaxPooling2D)   (None, 112, 112, 25  0           ['activation[0][0]']             \n","                                6)                                                                \n","                                                                                                  \n"," conv2d_5 (Conv2D)              (None, 112, 112, 12  2654336     ['max_pooling2d[0][0]']          \n","                                8)                                                                \n","                                                                                                  \n"," conv2d_6 (Conv2D)              (None, 112, 112, 12  1605760     ['max_pooling2d[0][0]']          \n","                                8)                                                                \n","                                                                                                  \n"," conv2d_7 (Conv2D)              (None, 112, 112, 12  819328      ['max_pooling2d[0][0]']          \n","                                8)                                                                \n","                                                                                                  \n"," conv2d_8 (Conv2D)              (None, 112, 112, 12  295040      ['max_pooling2d[0][0]']          \n","                                8)                                                                \n","                                                                                                  \n"," concatenate_1 (Concatenate)    (None, 112, 112, 51  0           ['conv2d_5[0][0]',               \n","                                2)                                'conv2d_6[0][0]',               \n","                                                                  'conv2d_7[0][0]',               \n","                                                                  'conv2d_8[0][0]']               \n","                                                                                                  \n"," batch_normalization_1 (BatchNo  (None, 112, 112, 51  2048       ['concatenate_1[0][0]']          \n"," rmalization)                   2)                                                                \n","                                                                                                  \n"," activation_1 (Activation)      (None, 112, 112, 51  0           ['batch_normalization_1[0][0]']  \n","                                2)                                                                \n","                                                                                                  \n"," conv2d_9 (Conv2D)              (None, 112, 112, 12  5308544     ['activation_1[0][0]']           \n","                                8)                                                                \n","                                                                                                  \n"," conv2d_10 (Conv2D)             (None, 112, 112, 12  3211392     ['activation_1[0][0]']           \n","                                8)                                                                \n","                                                                                                  \n"," conv2d_11 (Conv2D)             (None, 112, 112, 12  1638528     ['activation_1[0][0]']           \n","                                8)                                                                \n","                                                                                                  \n"," conv2d_12 (Conv2D)             (None, 112, 112, 12  589952      ['activation_1[0][0]']           \n","                                8)                                                                \n","                                                                                                  \n"," concatenate_2 (Concatenate)    (None, 112, 112, 51  0           ['conv2d_9[0][0]',               \n","                                2)                                'conv2d_10[0][0]',              \n","                                                                  'conv2d_11[0][0]',              \n","                                                                  'conv2d_12[0][0]']              \n","                                                                                                  \n"," batch_normalization_2 (BatchNo  (None, 112, 112, 51  2048       ['concatenate_2[0][0]']          \n"," rmalization)                   2)                                                                \n","                                                                                                  \n"," activation_2 (Activation)      (None, 112, 112, 51  0           ['batch_normalization_2[0][0]']  \n","                                2)                                                                \n","                                                                                                  \n"," max_pooling2d_1 (MaxPooling2D)  (None, 56, 56, 512)  0          ['activation_2[0][0]']           \n","                                                                                                  \n"," conv2d_13 (Conv2D)             (None, 56, 56, 192)  7962816     ['max_pooling2d_1[0][0]']        \n","                                                                                                  \n"," conv2d_14 (Conv2D)             (None, 56, 56, 192)  4817088     ['max_pooling2d_1[0][0]']        \n","                                                                                                  \n"," conv2d_15 (Conv2D)             (None, 56, 56, 192)  2457792     ['max_pooling2d_1[0][0]']        \n","                                                                                                  \n"," conv2d_16 (Conv2D)             (None, 56, 56, 192)  884928      ['max_pooling2d_1[0][0]']        \n","                                                                                                  \n"," concatenate_3 (Concatenate)    (None, 56, 56, 768)  0           ['conv2d_13[0][0]',              \n","                                                                  'conv2d_14[0][0]',              \n","                                                                  'conv2d_15[0][0]',              \n","                                                                  'conv2d_16[0][0]']              \n","                                                                                                  \n"," batch_normalization_3 (BatchNo  (None, 56, 56, 768)  3072       ['concatenate_3[0][0]']          \n"," rmalization)                                                                                     \n","                                                                                                  \n"," activation_3 (Activation)      (None, 56, 56, 768)  0           ['batch_normalization_3[0][0]']  \n","                                                                                                  \n"," conv2d_17 (Conv2D)             (None, 56, 56, 192)  11944128    ['activation_3[0][0]']           \n","                                                                                                  \n"," conv2d_18 (Conv2D)             (None, 56, 56, 192)  7225536     ['activation_3[0][0]']           \n","                                                                                                  \n"," conv2d_19 (Conv2D)             (None, 56, 56, 192)  3686592     ['activation_3[0][0]']           \n","                                                                                                  \n"," conv2d_20 (Conv2D)             (None, 56, 56, 192)  1327296     ['activation_3[0][0]']           \n","                                                                                                  \n"," concatenate_4 (Concatenate)    (None, 56, 56, 768)  0           ['conv2d_17[0][0]',              \n","                                                                  'conv2d_18[0][0]',              \n","                                                                  'conv2d_19[0][0]',              \n","                                                                  'conv2d_20[0][0]']              \n","                                                                                                  \n"," batch_normalization_4 (BatchNo  (None, 56, 56, 768)  3072       ['concatenate_4[0][0]']          \n"," rmalization)                                                                                     \n","                                                                                                  \n"," activation_4 (Activation)      (None, 56, 56, 768)  0           ['batch_normalization_4[0][0]']  \n","                                                                                                  \n"," conv2d_21 (Conv2D)             (None, 56, 56, 1000  769000      ['activation_4[0][0]']           \n","                                )                                                                 \n","                                                                                                  \n"," conv2d_22 (Conv2D)             (None, 56, 56, 1)    1001        ['conv2d_21[0][0]']              \n","                                                                                                  \n","==================================================================================================\n","Total params: 57,897,937\n","Trainable params: 57,892,305\n","Non-trainable params: 5,632\n","__________________________________________________________________________________________________\n","None\n"]}]},{"cell_type":"markdown","source":["## Test"],"metadata":{"id":"vKiQUv8qKcji"}},{"cell_type":"code","source":["# -*- coding: utf-8 -*-\n","\n","import cv2\n","import numpy as np\n","import sklearn.metrics as metrics\n","from PIL import Image\n","import matplotlib.pyplot as plt\n","from model import MSCNN\n","from data import visualization\n","\n","\n","def eva_regress(y_true, y_pred):\n","    \"\"\"Evaluation\n","    evaluate the predicted resul.\n","\n","    # Arguments\n","        y_true: List/ndarray, ture data.\n","        y_pred: List/ndarray, predicted data.\n","    \"\"\"\n","    mae = metrics.mean_absolute_error(y_true, y_pred)\n","    mse = metrics.mean_squared_error(y_true, y_pred)\n","\n","    print('mae:%f' % mae)\n","    print('mse:%f' % mse)\n","\n","\n","if __name__ == '__main__':\n","\n","    model = MSCNN((224, 224, 3))\n","    model.load_weights('model\\\\final_weights.h5')\n","    cap = cv2.VideoCapture(\"test.mp4\")\n","    while True:\n","        ret, frame = cap.read()\n","        img = frame\n","        if frame is None:\n","            break\n","        ori_img = img.copy()\n","        img = cv2.resize(img, (224, 224))\n","        img = img / 255.\n","        img = np.expand_dims(img, axis=0)\n","        dmap = model.predict(img)[0][:, :, 0]\n","        dmap = cv2.GaussianBlur(dmap, (15, 15), 0)\n","        height, width = dmap.shape\n","        fig, ax = plt.subplots()\n","        plt.figure(figsize=(10, 10))\n","        fig.set_size_inches(width / 100.0 / 3.0, height / 100.0 / 3.0)\n","        plt.gca().xaxis.set_major_locator(plt.NullLocator())\n","        plt.gca().yaxis.set_major_locator(plt.NullLocator())\n","        plt.subplots_adjust(top=1, bottom=0, left=0, right=1, hspace=0, wspace=0)\n","        plt.margins(0, 0)\n","        plt.imshow(dmap)\n","        plt.savefig(\"result.jpg\")\n","        re_img = cv2.imread(\"result.jpg\")\n","        ori_img = cv2.resize(ori_img, (400, 400))\n","        re_img = cv2.resize(re_img, (400, 400))\n","        cv2.imshow(\"mg0\", ori_img)\n","        cv2.imshow(\"img1\", re_img)\n","        cv2.waitKey(1)\n","        # visualization(img[0], dmap)\n","        print('count:', int(np.sum(dmap)))"],"metadata":{"id":"GoOwPs6-KetM"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Train"],"metadata":{"id":"GPqPSDyLKgUk"}},{"cell_type":"code","source":["# -*- coding: utf-8 -*-\n","\n","import os\n","import sys\n","import argparse\n","import pandas as pd\n","\n","from keras.optimizers import gradient_descent_v2\n","from keras.callbacks import ReduceLROnPlateau\n","from sklearn.model_selection import train_test_split\n","\n","from model import MSCNN\n","from data import generator\n","\n","\n","def main(argv):\n","    parser = argparse.ArgumentParser()\n","    # Required arguments.\n","    parser.add_argument(\n","        \"--size\",\n","        default=224,\n","        help=\"The image size of train sample.\")\n","    parser.add_argument(\n","        \"--batch\",\n","        default=2,\n","        help=\"The number of train samples per batch.\")\n","    parser.add_argument(\n","        \"--epochs\",\n","        default=20,\n","        help=\"The number of train iterations.\")\n","\n","    args = parser.parse_args()\n","\n","    train(int(args.batch), int(args.epochs),int(args.size))\n","\n","\n","def train(batch, epochs, size):\n","    \"\"\"Train the model.\n","\n","    Arguments:\n","        batch: Integer, The number of train samples per batch.\n","        epochs: Integer, The number of train iterations.\n","        size: Integer, image size.\n","    \"\"\"\n","    if not os.path.exists('model'):\n","        os.makedirs('model')\n","\n","    model = MSCNN((size, size, 3))\n","\n","    opt = gradient_descent_v2.SGD(lr=1e-5, momentum=0.9, decay=0.0005)\n","    model.compile(optimizer=opt, loss='mse')\n","\n","    lr = ReduceLROnPlateau(monitor='loss', min_lr=1e-7)\n","\n","    indices = list(range(1500))\n","    train, test = train_test_split(indices, test_size=0.25)\n","\n","    hist = model.fit_generator(\n","        generator(train, batch, size),\n","        validation_data=generator(test, batch, size),\n","        steps_per_epoch=len(train) // batch,\n","        validation_steps=len(test) // batch,\n","        epochs=epochs,\n","        callbacks=[lr])\n","\n","    model.save_weights('model\\\\final_weights.h5')\n","\n","    df = pd.DataFrame.from_dict(hist.history)\n","    df.to_csv('model\\\\history.csv', index=False, encoding='utf-8')\n","\n","\n","if __name__ == '__main__':\n","    main(sys.argv)"],"metadata":{"id":"BH-P568NKieJ"},"execution_count":null,"outputs":[]}]}